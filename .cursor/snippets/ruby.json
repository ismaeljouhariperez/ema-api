{
  "Rails Controller": {
    "prefix": "railscontroller",
    "body": [
      "class ${1:Name}Controller < ApplicationController",
      "  before_action :set_${2:resource}, only: [:show, :update, :destroy]",
      "",
      "  # GET /${3:resources}",
      "  def index",
      "    @${3:resources} = ${4:Resource}.all",
      "    render json: @${3:resources}",
      "  end",
      "",
      "  # GET /${3:resources}/1",
      "  def show",
      "    render json: @${2:resource}",
      "  end",
      "",
      "  # POST /${3:resources}",
      "  def create",
      "    @${2:resource} = ${4:Resource}.new(${2:resource}_params)",
      "",
      "    if @${2:resource}.save",
      "      render json: @${2:resource}, status: :created, location: @${2:resource}",
      "    else",
      "      render json: @${2:resource}.errors, status: :unprocessable_entity",
      "    end",
      "  end",
      "",
      "  # PATCH/PUT /${3:resources}/1",
      "  def update",
      "    if @${2:resource}.update(${2:resource}_params)",
      "      render json: @${2:resource}",
      "    else",
      "      render json: @${2:resource}.errors, status: :unprocessable_entity",
      "    end",
      "  end",
      "",
      "  # DELETE /${3:resources}/1",
      "  def destroy",
      "    @${2:resource}.destroy",
      "  end",
      "",
      "  private",
      "    # Use callbacks to share common setup or constraints between actions.",
      "    def set_${2:resource}",
      "      @${2:resource} = ${4:Resource}.find(params[:id])",
      "    end",
      "",
      "    # Only allow a list of trusted parameters through.",
      "    def ${2:resource}_params",
      "      params.require(:${2:resource}).permit(${5::name, :description})",
      "    end",
      "end"
    ],
    "description": "Create a Rails API controller with CRUD actions"
  },
  "Rails Model": {
    "prefix": "railsmodel",
    "body": [
      "class ${1:Name} < ApplicationRecord",
      "  # Associations",
      "  ${2:belongs_to :user}",
      "",
      "  # Validations",
      "  validates :${3:name}, presence: true${4:, uniqueness: true}",
      "",
      "  # Scopes",
      "  scope :${5:active}, -> { where(${6:active: true}) }",
      "",
      "  # Callbacks",
      "  before_save :${7:normalize_attributes}",
      "",
      "  private",
      "",
      "  def ${7:normalize_attributes}",
      "    ${8:self.name = name.strip if name.present?}",
      "  end",
      "end"
    ],
    "description": "Create a Rails model with common sections"
  },
  "Rails Service": {
    "prefix": "railsservice",
    "body": [
      "class ${1:Name}Service",
      "  def initialize(${2:user})",
      "    @${2:user} = ${2:user}",
      "  end",
      "",
      "  def ${3:perform}(${4:params})",
      "    ${5:# Service implementation}",
      "    ${6:result}",
      "  rescue StandardError => e",
      "    Rails.logger.error(\"Error in ${1:Name}Service#${3:perform}: #{e.message}\")",
      "    raise e",
      "  end",
      "",
      "  private",
      "",
      "  attr_reader :${2:user}",
      "end"
    ],
    "description": "Create a Rails service object"
  },
  "Rails Job": {
    "prefix": "railsjob",
    "body": [
      "class ${1:Name}Job < ApplicationJob",
      "  queue_as :${2:default}",
      "",
      "  def perform(${3:*args})",
      "    ${4:# Job implementation}",
      "  rescue StandardError => e",
      "    Rails.logger.error(\"Error in ${1:Name}Job: #{e.message}\")",
      "    ${5:# Handle failure, retry logic, etc.}",
      "  end",
      "end"
    ],
    "description": "Create a Rails ActiveJob job"
  },
  "Rails Policy": {
    "prefix": "railspolicy",
    "body": [
      "class ${1:Resource}Policy < ApplicationPolicy",
      "  def index?",
      "    ${2:true}",
      "  end",
      "",
      "  def show?",
      "    ${3:scope.where(id: record.id).exists?}",
      "  end",
      "",
      "  def create?",
      "    ${4:user.present?}",
      "  end",
      "",
      "  def update?",
      "    ${5:user.present? && (record.user_id == user.id || user.admin?)}",
      "  end",
      "",
      "  def destroy?",
      "    ${6:update?}",
      "  end",
      "",
      "  class Scope < Scope",
      "    def resolve",
      "      ${7:scope.all}",
      "    end",
      "  end",
      "end"
    ],
    "description": "Create a Pundit policy"
  },
  "Rails Serializer": {
    "prefix": "railsserializer",
    "body": [
      "class ${1:Resource}Serializer < ActiveModel::Serializer",
      "  attributes :id, ${2::name, :description, :created_at, :updated_at}",
      "",
      "  ${3:belongs_to :user}",
      "  ${4:has_many :comments}",
      "end"
    ],
    "description": "Create an ActiveModel::Serializer"
  },
  "Rails Migration": {
    "prefix": "railsmigration",
    "body": [
      "class ${1:CreateResources} < ActiveRecord::Migration[${2:7.0}]",
      "  def change",
      "    create_table :${3:resources} do |t|",
      "      t.string :${4:name}",
      "      t.text :${5:description}",
      "      ${6:t.references :user, null: false, foreign_key: true}",
      "",
      "      t.timestamps",
      "    end",
      "    ${7:add_index :${3:resources}, :${4:name}}",
      "  end",
      "end"
    ],
    "description": "Create a Rails migration"
  },
  "Rails Route": {
    "prefix": "railsroute",
    "body": [
      "namespace :${1:api} do",
      "  namespace :${2:v1} do",
      "    resources :${3:resources} do",
      "      ${4:member do",
      "        ${5:get :custom_action}",
      "      end}",
      "      ${6:collection do",
      "        ${7:get :search}",
      "      end}",
      "    end",
      "  end",
      "end"
    ],
    "description": "Create Rails API routes with namespaces"
  },
  "Rails Test": {
    "prefix": "railstest",
    "body": [
      "require 'rails_helper'",
      "",
      "RSpec.describe ${1:Resource}, type: :${2:model} do",
      "  ${3:let(:user) { create(:user) }}",
      "  ${4:let(:${5:resource}) { create(:${5:resource}, user: user) }}",
      "",
      "  describe '${6:validations}' do",
      "    it '${7:is valid with valid attributes}' do",
      "      ${8:expect(${5:resource}).to be_valid}",
      "    end",
      "",
      "    it '${9:is not valid without a name}' do",
      "      ${10:${5:resource}.name = nil",
      "      expect(${5:resource}).not_to be_valid}",
      "    end",
      "  end",
      "end"
    ],
    "description": "Create a Rails RSpec test"
  },
  "Rails Factory": {
    "prefix": "railsfactory",
    "body": [
      "FactoryBot.define do",
      "  factory :${1:resource} do",
      "    ${2:name} { ${3:\"Test ${1:Resource}\"} }",
      "    ${4:description} { ${5:\"This is a test description\"} }",
      "    ${6:association :user}",
      "  end",
      "end"
    ],
    "description": "Create a FactoryBot factory for Rails"
  }
}
